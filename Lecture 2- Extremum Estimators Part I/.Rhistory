fe2
summary(fe2)
data
dims(data)
dims(data)
dim(data)
data
summary(fe2)
fe<-felm(data=data,kappa~I(1/(1-retail_share)) +  I(log(market_cap))+ normalized_l2 | pair + quarter | 0 | pair)
fe2<-felm(data=data,kappa~I(1/(1-retail_share)) + I(log(market_cap))+ normalized_l2 + BlackRock + Fidelity + Vanguard + StateStreet| pair + quarter | 0 | pair)
fe3<-felm(data=data,kappa~I(1/(1-retail_share)) + I(1/ihhi) + I(log(market_cap))+ normalized_l2 + BlackRock + Fidelity + Vanguard + StateStreet| pair + quarter | 0 | pair)
summary(fe)
summary()
summarise(fe)
summarize(fe)
summary(fe)
summary(fe2)
summary(fe3)
fe4<-felm(data=data,kappa~I(1/(1-retail_share)) + I(log(market_cap))+ poly(normalized_l2,3) + BlackRock + Fidelity + Vanguard + StateStreet| pair + quarter | 0 | pair)
fe4<-felm(data=data,kappa~I(1/(1-retail_share)) + I(log(market_cap))+ poly(normalized_l2,2) + BlackRock + Fidelity + Vanguard + StateStreet| pair + quarter | 0 | pair)
summary(fe3)
summary(fe2)
summary(data$normalized_l2)
summary(data$normalized_l2)
desc(data$normalized_l2)
summary(data$normalized_l2)
describe
library(Hmisc)
describe(data$unnormalized_l2)
describe(data$normalized_l2)
data
describe(data$investor_l2)
data %>% filter(quarter> 2017-01-01)
data %>% filter(quarter> "2017-01-01")
data %>% filter(quarter> "2017-09-01")
last<-data %>% filter(quarter> "2017-09-01")
last
describe(last$investor_l2)
describe(last$normalized_l2)
describe(last$normalized_l2)
describe(last$normalized_l2)
min(data$investor_l2)
min(data$investor_l1)
describe(log(last$investor_l2))
describe(log(last$market_cap))
library(Hmisc)
library(stargazer)
library(tidyverse)
library(feather)
library(data.table)
library(lfe)
DT.for.set.nms   <- function(x) { for (j in names(x))
set(x,which(is.na(x[[j]])),j,0) }
# Start Actual Code
data<-read_feather("~/Dropbox/common_owner/all_of_the_kappas/data/derived/tmp-regs.feather")
DT.for.set.nms(data)
data$year <- year(data$quarter)
data
data$Vanguard
library(Hmisc)
library(stargazer)
library(tidyverse)
library(feather)
library(data.table)
library(lfe)
DT.for.set.nms   <- function(x) { for (j in names(x))
set(x,which(is.na(x[[j]])),j,0) }
# Start Actual Code
data<-read_feather("~/Dropbox/common_owner/all_of_the_kappas/data/derived/tmp-regs.feather")
DT.for.set.nms(data)
data$year <- year(data$quarter)
describe(data$normalized_l2)
last<- data %>% filter(quarter > "2017-09-01")
describe(last$normalized_l2)
library(Hmisc)
library(stargazer)
library(tidyverse)
library(feather)
library(data.table)
library(lfe)
DT.for.set.nms   <- function(x) { for (j in names(x))
set(x,which(is.na(x[[j]])),j,0) }
# Start Actual Code
data<-read_feather("~/Dropbox/common_owner/all_of_the_kappas/data/derived/tmp-regs.feather")
DT.for.set.nms(data)
data$year <- year(data$quarter)
# restrict to years with big 4 coverage
#data<- data %>% filter(kappa < 4, year > 1999)
data$pair = interaction(data$from,data$to, drop=TRUE)
data$pair
1143865/(500^2)
1143865/(500^2)
1143865/(500^2)
1143865/(500^2)
last <- data %>% filter (quarter > "2017-09-01")
last
last$pair
unique(last$pair)
droplevels(last$pair)
251001 / 500
data<- data %>% filter(kappa < 4, year > 1999, from != to)
len(data)
dim(data)
install.packages(c("AER", "backports", "BH", "callr", "checkmate", "class", "clipr", "codetools", "colorspace", "curl", "data.table", "dbplyr", "feather", "git2r", "Hmisc", "htmlTable", "httr", "kableExtra", "knitr", "openssl", "pillar", "plm", "ps", "purrr", "quantreg", "readr", "readxl", "rlang", "rms", "rstudioapi", "TH.data", "tibble", "tinytex"))
1pm tomorrow (Friday) in KMEC 4-110
#always
library(tidyverse)
# for loading data
library(tidyquant)
# for cleaning up time series
library(timetk)
library(broom)
library(sweep)
library(forecast)
# for AR regression
library(dynlm)
# for testing
library(ts)
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
# Compute the autocorrelation function and plot it
result<-tidy(acf(gdp$price))
ggplot(result, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.1) + theme_bw()
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
# automatic lag selection
ar(gdp$price)
# Read in the Steel Data
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
gdp
gdp
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
gdp
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
### Loading Packages
#always
library(tidyverse)
# for loading data
library(tidyquant)
# for cleaning up time series
library(timetk)
library(broom)
library(sweep)
library(forecast)
# for AR regression
library(dynlm)
# for testing
library(ts)
install.packages("ts")
### Loading Packages
#always
library(tidyverse)
# for loading data
library(tidyquant)
# for cleaning up time series
library(timetk)
library(broom)
library(sweep)
library(forecast)
# for AR regression
library(dynlm)
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
# Compute the autocorrelation function and plot it
result<-tidy(acf(gdp$price))
ggplot(result, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.1) + theme_bw()
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
# automatic lag selection
ar(gdp$price)
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
# Run ADL(3,3) Regression
summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
# do some granger tests
grangertest(output~ hours, order=3,data=dt2)
grangertest(hours~ output, order=3,data=dt2)
??grangertest
library(tseries)
??grangertest
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
# automatic lag selection
ar(gdp$price)
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
setwd("~/Dropbox/Metrics 2019/Lecture 1- Time Series")
# Load and plot the GDP Data
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
# Compute the autocorrelation function and plot it
result<-tidy(acf(gdp$price))
ggplot(result, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.1) + theme_bw()
# Run various AR(p) models
ar1<-ar(gdp$price,order=1)
ar2<-ar(gdp$price,order=2)
# automatic lag selection
ar(gdp$price)
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
# Run ADL(3,3) Regression
summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
# do some granger tests
grangertest(output~ hours, order=3,data=dt2)
grangertest(hours~ output, order=3,data=dt2)
library(lmtest)
# do some granger tests
grangertest(output~ hours, order=3,data=dt2)
grangertest(hours~ output, order=3,data=dt2)
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
# Plot and generate a random walk
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
### Dickey-Fuller Test
gdp2<-ts(gdp$price)
# run the regression
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4)))
# skip to the test
adf.test(gdp2, k=3)
# ARIMA
auto.arima(gdp2)
## Alcohol Data
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2007-01-01",to   = "2018-12-31")
# Plot with Exponential Moving Average
alcohol_sales_tbl %>%
ggplot(aes(x = date, y = price)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_smooth(method = "loess") +
labs(title = "US Alcohol Sales: Monthly", x = "", y = "Millions") +
scale_y_continuous(labels = scales::dollar) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme_tq()
alcohol_sales_ts <- tk_ts(alcohol_sales_tbl, start = 2007, freq = 12, silent = TRUE)
alcohol_sales_ts
fit_ets <- ets(alcohol_sales_ts)
# or
fit_ets <- alcohol_sales_ts %>%
ets()
augment_fit_ets <- sw_augment(fit_ets)
augment_fit_ets
# Make the plot of the smoothed fit
# note: yearmon is the time series index
augment_fit_ets %>%
ggplot(aes(x = index, y = .resid)) +
geom_hline(yintercept = 0, color = "grey40") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "loess") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Residuals", x = "") +
theme_tq()
decomp_fit_ets <- sw_tidy_decomp(fit_ets)
decomp_fit_ets
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Auto ARIMA (2,10)
fit<-auto.arima(alcohol_sales_ts)
fit
summary(fit)
??auto.arima
### Loading Packages
#always
library(tidyverse)
# for loading data
library(tidyquant)
# for cleaning up time series
library(timetk)
library(broom)
library(sweep)
library(forecast)
# for AR regression
library(dynlm)
# for testing
library(tseries)
library(lmtest)
gdp<-tq_get("A191RL1Q225SBEA", get  = "economic.data",
from='1950-01-1',to='2018-12-31')
gdp
mean(gdp)
mean(gdp$price)
tail(gdp)
ggplot(gdp, aes(date, price)) + geom_line() +
scale_x_date() + ylab("Annualized GDP Growth") + xlab("")
acf(gdp$price)
result<-tidy(acf(gdp$price))
result
ggplot(result, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.1) + theme_bw()
result<-tidy(pcf(gdp$price))
result<-tidy(pacf(gdp$price))
ggplot(result, aes(x=lag, y=acf)) +
geom_bar(stat='identity', width=0.1) + theme_bw()
pacf(gdp$price)
ar1<-ar(gdp$price,order=1)
ar1
ar2<-ar(gdp$price,order=2)
ar2
??ar
?ar
ar2<-ar(gdp$price,aic=TRUE)
ar2
ar2<-ar(gdp$price,cic=TRUE)
ar2<-ar(gdp$price,bic=TRUE)
ar2
# Read in the Steel Data
dt<-read.csv("steel.csv")
# convert to time series
dt2<-ts(dt)
# Run ADL(3,3) Regression
summary(dynlm(output~L(output,1:3)+L(hours,1:3), data=dt2))
# do some granger tests
grangertest(output~ hours, order=3,data=dt2)
grangertest(hours~ output, order=3,data=dt2)
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0.02))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0.02))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0.02))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
tibble(x = 1:1000, y = cumsum(rnorm(1000, mean = 0.02))) %>%
ggplot(aes(x=x,y=y))+
geom_point()+
geom_line()
### Dickey-Fuller Test
gdp2<-ts(gdp$price)
# run the regression
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4)))
dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),2:4))
dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),1:4))
dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),1:3))
tidy(dynlm(d(gdp2)~L(gdp2,1)+L(d(gdp2),1:3)))
adf.test(gdp2, k=3)
adf.test(gdp2, k=2)
alcohol_sales_tbl <- tq_get("S4248SM144NCEN",
get  = "economic.data",
from = "2007-01-01",to   = "2018-12-31")
alcohol_sales_tbl
alcohol_sales_tbl %>%
ggplot(aes(x = date, y = price)) +
geom_line(size = 1, color = palette_light()[[1]]) +
geom_smooth(method = "loess") +
labs(title = "US Alcohol Sales: Monthly", x = "", y = "Millions") +
scale_y_continuous(labels = scales::dollar) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
theme_tq()
alcohol_sales_ts <- tk_ts(alcohol_sales_tbl, start = 2007, freq = 12, silent = TRUE)
alcohol_sales_ts
fit_ets <- ets(alcohol_sales_ts)
fit_ets <- alcohol_sales_ts %>%
ets()
fit_ets
augment_fit_ets <- sw_augment(fit_ets)
augment_fit_ets
augment_fit_ets %>%
ggplot(aes(x = index, y = .resid)) +
geom_hline(yintercept = 0, color = "grey40") +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
geom_smooth(method = "loess") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Residuals", x = "") +
theme_tq()
decomp_fit_ets <- sw_tidy_decomp(fit_ets)
decomp_fit_ets
decomp_fit_ets %>%
gather(key = key, value = value, -index) %>%
mutate(key = forcats::as_factor(key)) %>%
ggplot(aes(x = index, y = value, group = key)) +
geom_line(color = palette_light()[[2]]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
facet_wrap(~ key, scales = "free_y") +
scale_x_yearmon(n = 10) +
labs(title = "US Alcohol Sales: ETS Decomposition", x = "") +
theme_tq() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Auto ARIMA (2,10)
fit<-auto.arima(alcohol_sales_ts)
fit
alcohol_sales_ts
# Auto ARIMA (2,10)
fit<-auto.arima(alcohol_sales_ts)
fit
alcohol_sales_ts
alcohol_sales_ts <- tk_ts(alcohol_sales_tbl, start = 2007, silent = TRUE)
alcohol_sales_ts
fit<-auto.arima(alcohol_sales_ts)
fit
install.packages("AER")
library(AER)
library(gmm)
install.packages("gmm4")
install.packages("gmm4", repos = c("http://R-Forge.R-project.org",
"http://your.nearest.CRAN.mirror.org"), dep = TRUE)
install.packages("gmm4", repos = c("http://R-Forge.R-project.org", dep = TRUE)
install.packages("gmm4", repos = c("http://R-Forge.R-project.org", dep = TRUE))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("arrow", "backports", "BH", "boot", "broom", "class", "cli", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "data.table", "DBI", "dbplyr", "dplyr", "dreamerr", "DT", "estimatr", "fansi", "fixest", "forcats", "foreign", "furrr", "future", "generics", "ggplot2", "gh", "git2r", "globals", "hexbin", "hms", "htmltools", "htmlwidgets", "isoband", "janitor", "jsonlite", "KernSmooth", "knitr", "lava", "lfe", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "memoise", "mgcv", "mime", "nlme", "nnet", "pillar", "pkgbuild", "plotly", "processx", "promises", "ps", "quantmod", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "recipes", "reprex", "rlang", "rmarkdown", "rprojroot", "rsample", "rstudioapi", "SparseM", "spatial", "SQUAREM", "testthat", "tibble", "timetk", "tinytex", "tseries", "usethis", "vctrs", "withr", "xfun"))
install.packages(c("broom", "rmarkdown"))
